services:
  course_data_etl:
    build:
      context: .
      dockerfile: course_data_etl/Dockerfile
    volumes:
      - raw_course_data:/job/course_data_etl/data
    environment:
      - FORCE_PARSE=${FORCE_PARSE:-false}
      - AVOID_PARSE_COURSERA=${AVOID_PARSE_COURSERA:-false}
      - AVOID_PARSE_UDEMY=${AVOID_PARSE_UDEMY:-false}
      - FORCE_INSERT=${FORCE_INSERT:-false}
    depends_on:
      - data_layer_api

  ollama:
    image: ollama/ollama
    container_name: ollama
    volumes:
      - ollama:/root/.ollama
    command: serve
    expose:
      - 11434
  
  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=course_data_etl
    ports:
      - "5433:5432"
    volumes: 
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    volumes:
    - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres

  data_layer_api:
    build:
      context: .
      dockerfile: data_layer_api/Dockerfile
    volumes:
      - sql_lite_db:/server/data_layer_api/database/vectors.db
    environment:
      - DB_IMPLEMENTATION=${DB_IMPLEMENTATION:-postgres}
      - DB_PATH=${DB_PATH:-/server/data_layer_api/database/vectors.db}
      - DB_HOST=postgres
      - DB_PORT=5433
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=course_data_etl
      - FLASK_ENV=development
    ports:
      - "5003:5000"
    develop:
      watch:
        - action: sync
          path: ./data_layer_api
          target: /server/data_layer_api
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - data_layer_api

volumes:
  raw_course_data:
  ollama:
  postgres_data:
  sql_lite_db:
  pgadmin_data:
